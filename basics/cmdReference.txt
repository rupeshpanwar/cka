# POD
Create an NGINX Pod
kubectl run nginx --image=nginx

kubectl get events | grep -i podName

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run nginx --image=nginx --dry-run=client -o yaml

  # ReplicaSet Cmds reference
   kubectl apply -f replica-sets.yaml
   kubectl get rc,pods
   kubetcl replace -f replica-sets.yaml
   kubectl scale --replicas=4 replicaset myapp-replicaset
   kubectl delete rc myapp-replicaset --cascade=false


# Deployment
Create a deployment
kubectl create deployment --image=nginx nginx

kubectl scale deployment blue --replicas=6

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml


Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

# Deployment
  kubectl apply -f basics/deploy-ments.yaml
  kubectl get all
  kubectl delete deploy nginx-deployment

# Namespace
  kubectl get ns
  kubectl get pods --all-namespaces
  kubectl get pods --namespace=kube-system
  kubectl apply -f basics/name-space.yaml
  kubectl run nginx --image=nginx --namespace=dev
  kubectl apply -f basics/pod-namespace.yml
  kubectl create ns prod
  kubectl config set-context $(kubectl config current-context) --namespace=dev
  kubectl apply -f basics/resource-quota.yml
  kubectl apply -f basics/resource-quota.yml
  kubectl delete ns prod

  # Selector & Labels
  kubectl get pods --selector name=myapp


  # Taint and Tolerations
  kubectl describe nodes node01 | grep Taints
  kubectl taint nodes node01 spray=mortein:NoSchedule
  kubectl taint nodes controlplane node-role.kubernetes.io/master:NoSchedule-


  add below section to pod definition to apply taint n toleration
  tolerations:
 - key: spray
   value: mortein
   effect: NoSchedule
   operator: Equal

# Node selector and affinity
  kubectl get nodes -o wide
  kubectl describe node node01 | grep labels
  kubectl describe node node01 | grep -i Labels
  kubectl label nodes node01 color=blue
  
   kubectl create deploy blue --image=nginx --replicas=3
   kubectl edit deployment blue

  append below template.spec
  affinity:
     nodeAffinity:
       requiredDuringSchedulingIgnoredDuringExecution:
         nodeSelectorTerms:
         - matchExpressions:
           - key: node-role.kubernetes.io/master
             operator: Exists
  
  append below template.spec          
  affinity:
    nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: color
              operator: In
              values:
              - blue

# Resource Limit and Requests
kubectl describe pod rabbit

resources:
      limits:
        cpu: "1"
        memory: 512Mi
      requests:
        cpu: "1"
        memory: 512Mi

kubectl get events | grep nginx
kubectl describe pod nginx | grep -i image
kubectl describe pod nginx | grep IP:


# DaemonSet
kubectl get daemonsets --all-namespaces
kubectl describe daemonset kube-proxy --namespace=kube-system
kubectl describe daemonset kube-flannel-ds-amd64 --namespace=kube-system
kubectl get pod -n kube-system|grep elasticsearch
